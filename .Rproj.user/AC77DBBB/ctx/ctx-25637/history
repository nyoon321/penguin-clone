reticulate::repl_python()
from palmerpenguins import penguins
import vetiver
from vetiver import VetiverModel
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel
import pins
quit
reticulate::repl_python()
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model', allow_pickle_read=True)
vetiver.vetiver_pin_write(b,v)
v = vetiver.VetiverModel.from_pin(b, 'penguin_model')
app = vetiver.VetiverAPI(v, check_prototype=True)
# app.run(port=8080)
quit
reticulate::py_install("duckdb")
reticulate::repl_python()
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
quit
vetiver_prepare_docker(b, "penguin_model")
reticulate::repl_python()
vetiver_prepare_docker(b, "penguin_model")
vetiver.prepare_docker(b, "penguin_model")
vetiver.prepare_docker(b, "penguin_model")
pip install vetiver python-dotenv pins
from vetiver import VetiverModel
from dotenv import load_dotenv, find_dotenv
import vetiver
import pins
load_dotenv(find_dotenv())
b = pins.board_folder('data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model', version = '20240309T170010Z-a6f9b')
vetiver_api = vetiver.VetiverAPI(v)
api = vetiver_api.app
python app.py
app.run(port=8080)
import requests
req_data = {
"bill_length_mm": 0,
"species_Chinstrap": False,
"species_Gentoo": False,
"sex_male": False
}
req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
res = req.json().get('predict')[0]
import requests
req_data = {
"bill_length_mm": 10,
"species_Chinstrap": False,
"species_Gentoo": False,
"sex_male": False
}
req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
res = req.json().get('predict')[0]
from vetiver import VetiverModel
from dotenv import load_dotenv, find_dotenv
import vetiver
import pins
load_dotenv(find_dotenv())
b = pins.board_folder('data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model', version = '20240309T170010Z-a6f9b')
vetiver_api = vetiver.VetiverAPI(v)
api = vetiver_api.app
app.run(port=8080)
import requests
req_data = {
"bill_length_mm": 10,
"species_Chinstrap": False,
"species_Gentoo": False,
"sex_male": False
}
req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
res = req.json().get('predict')[0]
from vetiver import VetiverModel
from dotenv import load_dotenv, find_dotenv
import vetiver
import pins
load_dotenv(find_dotenv())
b = pins.board_folder('data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model', version = '20240309T170010Z-a6f9b')
vetiver_api = vetiver.VetiverAPI(v)
api = vetiver_api.app
app.run(port=8080)
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
df = penguins.load_penguins().dropna()
df.head(3)
api = vetiver_api.app
# Run the Flask application on port 8080
if __name__ == "__main__":
api.run(host='0.0.0.0', port=8080)
from vetiver import VetiverModel
from dotenv import load_dotenv, find_dotenv
import vetiver
import pins
load_dotenv(find_dotenv())
b = pins.board_folder('data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model', version = '20240309T170010Z-a6f9b')
vetiver_api = vetiver.VetiverAPI(v)
api = vetiver_api.app
# Run the Flask application on port 8080
if __name__ == "__main__":
api.run(host='0.0.0.0', port=8080)
pip install requests
from vetiver import VetiverModel
from dotenv import load_dotenv, find_dotenv
import vetiver
import pins
load_dotenv(find_dotenv())
b = pins.board_folder('data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model', version = '20240309T170010Z-a6f9b')
vetiver_api = vetiver.VetiverAPI(v)
api = vetiver_api.app
# Run the Flask application on port 8080
if __name__ == "__main__":
api.run(host='127.0.0.1', port=8080)
from vetiver import VetiverModel
from dotenv import load_dotenv, find_dotenv
import vetiver
import pins
load_dotenv(find_dotenv())
b = pins.board_folder('data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model', version = '20240309T170010Z-a6f9b')
vetiver_api = vetiver.VetiverAPI(v)
api = vetiver_api.app
# Run the Flask application on port 8080
if __name__ == "__main__":
api.run(host='127.0.0.1', port=8080)
from vetiver import VetiverModel
from dotenv import load_dotenv, find_dotenv
import vetiver
import pins
load_dotenv(find_dotenv())
b = pins.board_folder('data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model', version = '20240309T182229Z-a6f9b')
vetiver_api = vetiver.VetiverAPI(v)
api = vetiver_api.app
# Run the Flask application on port 8080
if __name__ == "__main__":
api.run(host='0.0.0.0', port=8080)
curl http://localhost:8080
curl http://localhost:8080
from vetiver import VetiverModel
from dotenv import load_dotenv, find_dotenv
import vetiver
import pins
load_dotenv(find_dotenv())
b = pins.board_folder('data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model', version = '20240309T182229Z-a6f9b')
vetiver_api = vetiver.VetiverAPI(v)
api = vetiver_api.app
# Run the Flask application on port 8080
if __name__ == "__main__":
api.run(host='0.0.0.0', port=8080)
quit
quit
install.packages("reticulate")
library(reticulate)
use_virtualenv("myenv", required = TRUE)
py_install("palmerpenguins")
install.packages("reticulate")
library(reticulate)
virtualenv_create(envname = "myenv")
virtualenv_install("myenv", packages = c("pandas", "numpy", "scikit-learn"))
library(reticulate)
use_virtualenv("myenv", required = TRUE)
py_install("palmerpenguins")
reticulate::repl_python()
from palmerpenguins import penguins
import vetiver
from vetiver import VetiverModel
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel
import pins
df = penguins.load_penguins().dropna()
df.head(3)
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model', allow_pickle_read=True)
vetiver.vetiver_pin_write(b,v)
v = vetiver.VetiverModel.from_pin(b, 'penguin_model')
app = vetiver.VetiverAPI(v, check_prototype=True)
# app.run(port=8080)
quit
reticulate::py_install("duckdb")
reticulate::repl_python()
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
vetiver.prepare_docker(b, "penguin_model")
from vetiver import VetiverModel
from dotenv import load_dotenv, find_dotenv
import vetiver
import pins
load_dotenv(find_dotenv())
b = pins.board_folder('data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model', version = '20240309T182229Z-a6f9b')
vetiver_api = vetiver.VetiverAPI(v)
api = vetiver_api.app
# Run the Flask application on port 8080
if __name__ == "__main__":
api.run(host='0.0.0.0', port=8080)
app.run(port=8080)
import requests
req_data = {
"bill_length_mm": 10,
"species_Chinstrap": False,
"species_Gentoo": False,
"sex_male": False
}
req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
res = req.json().get('predict')[0]
import shiny
from shiny import App, render, ui, reactive
import requests
api_url = 'http://127.0.0.1:8080/predict'
app_ui = ui.page_fluid(
ui.panel_title("Penguin Mass Predictor"),
ui.layout_sidebar(
ui.panel_sidebar(
[ui.input_slider("bill_length", "Bill Length (mm)", 30, 60, 45, step = 0.1),
ui.input_select("sex", "Sex", ["Male", "Female"]),
ui.input_select("species", "Species", ["Adelie", "Chinstrap", "Gentoo"]),
ui.input_action_button("predict", "Predict")]
),
ui.panel_main(
ui.h2("Penguin Parameters"),
ui.output_text_verbatim("vals_out"),
ui.h2("Predicted Penguin Mass (g)"),
ui.output_text("pred_out")
)
)
)
def server(input, output, session):
@reactive.Calc
def vals():
d = {
"bill_length_mm" : input.bill_length(),
"sex_male" : input.sex() == "Male",
"species_Gentoo" : input.species() == "Gentoo",
"species_Chinstrap" : input.species() == "Chinstrap"
}
return d
@reactive.Calc
@reactive.event(input.predict)
def pred():
r = requests.post(api_url, json = [vals()])
return r.json().get('predict')[0]
@output
@render.text
def vals_out():
return f"{vals()}"
@output
@render.text
def pred_out():
return f"{round(pred())}"
app = App(app_ui, server)
from vetiver import VetiverModel
from dotenv import load_dotenv, find_dotenv
import vetiver
import pins
load_dotenv(find_dotenv())
b = pins.board_folder('data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model', version = '20240309T182229Z-a6f9b')
vetiver_api = vetiver.VetiverAPI(v)
api = vetiver_api.app
# Run the Flask application on port 8080
if __name__ == "__main__":
api.run(host='0.0.0.0', port=8080)
import requests
req_data = {
"bill_length_mm": 10,
"species_Chinstrap": False,
"species_Gentoo": False,
"sex_male": False
}
req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
res = req.json().get('predict')[0]
import shiny
from shiny import App, render, ui, reactive
import requests
api_url = 'http://127.0.0.1:8080/predict'
app_ui = ui.page_fluid(
ui.panel_title("Penguin Mass Predictor"),
ui.layout_sidebar(
ui.panel_sidebar(
[ui.input_slider("bill_length", "Bill Length (mm)", 30, 60, 45, step = 0.1),
ui.input_select("sex", "Sex", ["Male", "Female"]),
ui.input_select("species", "Species", ["Adelie", "Chinstrap", "Gentoo"]),
ui.input_action_button("predict", "Predict")]
),
ui.panel_main(
ui.h2("Penguin Parameters"),
ui.output_text_verbatim("vals_out"),
ui.h2("Predicted Penguin Mass (g)"),
ui.output_text("pred_out")
)
)
)
def server(input, output, session):
@reactive.Calc
def vals():
d = {
"bill_length_mm" : input.bill_length(),
"sex_male" : input.sex() == "Male",
"species_Gentoo" : input.species() == "Gentoo",
"species_Chinstrap" : input.species() == "Chinstrap"
}
return d
@reactive.Calc
@reactive.event(input.predict)
def pred():
r = requests.post(api_url, json = [vals()])
return r.json().get('predict')[0]
@output
@render.text
def vals_out():
return f"{vals()}"
@output
@render.text
def pred_out():
return f"{round(pred())}"
app = App(app_ui, server)
import shiny
from shiny import App, render, ui, reactive
import requests
api_url = 'http://127.0.0.1:8080/predict'
app_ui = ui.page_fluid(
ui.panel_title("Penguin Mass Predictor"),
ui.layout_sidebar(
ui.panel_sidebar(
[ui.input_slider("bill_length", "Bill Length (mm)", 30, 60, 45, step = 0.1),
ui.input_select("sex", "Sex", ["Male", "Female"]),
ui.input_select("species", "Species", ["Adelie", "Chinstrap", "Gentoo"]),
ui.input_action_button("predict", "Predict")]
),
ui.panel_main(
ui.h2("Penguin Parameters"),
ui.output_text_verbatim("vals_out"),
ui.h2("Predicted Penguin Mass (g)"),
ui.output_text("pred_out")
)
)
)
def server(input, output, session):
@reactive.Calc
def vals():
d = {
"bill_length_mm" : input.bill_length(),
"sex_male" : input.sex() == "Male",
"species_Gentoo" : input.species() == "Gentoo",
"species_Chinstrap" : input.species() == "Chinstrap"
}
return d
@reactive.Calc
@reactive.event(input.predict)
def pred():
r = requests.post(api_url, json = [vals()])
return r.json().get('predict')[0]
@output
@render.text
def vals_out():
return f"{vals()}"
@output
@render.text
def pred_out():
return f"{round(pred())}"
app = App(app_ui, server)
from vetiver import VetiverModel
from dotenv import load_dotenv, find_dotenv
import vetiver
import pins
load_dotenv(find_dotenv())
b = pins.board_folder('data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model', version = '20240309T182229Z-a6f9b')
vetiver_api = vetiver.VetiverAPI(v)
api = vetiver_api.app
# Run the Flask application on port 8080
if __name__ == "__main__":
api.run(host='0.0.0.0', port=8080)
import requests
req_data = {
"bill_length_mm": 10,
"species_Chinstrap": False,
"species_Gentoo": False,
"sex_male": False
}
req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
res = req.json().get('predict')[0]
import shiny
from shiny import App, render, ui, reactive
import requests
api_url = 'http://127.0.0.1:8080/predict'
app_ui = ui.page_fluid(
ui.panel_title("Penguin Mass Predictor"),
ui.layout_sidebar(
ui.panel_sidebar(
[ui.input_slider("bill_length", "Bill Length (mm)", 30, 60, 45, step = 0.1),
ui.input_select("sex", "Sex", ["Male", "Female"]),
ui.input_select("species", "Species", ["Adelie", "Chinstrap", "Gentoo"]),
ui.input_action_button("predict", "Predict")]
),
ui.panel_main(
ui.h2("Penguin Parameters"),
ui.output_text_verbatim("vals_out"),
ui.h2("Predicted Penguin Mass (g)"),
ui.output_text("pred_out")
)
)
)
def server(input, output, session):
@reactive.Calc
def vals():
d = {
"bill_length_mm" : input.bill_length(),
"sex_male" : input.sex() == "Male",
"species_Gentoo" : input.species() == "Gentoo",
"species_Chinstrap" : input.species() == "Chinstrap"
}
return d
@reactive.Calc
@reactive.event(input.predict)
def pred():
r = requests.post(api_url, json = [vals()])
return r.json().get('predict')[0]
@output
@render.text
def vals_out():
return f"{vals()}"
@output
@render.text
def pred_out():
return f"{round(pred())}"
app = App(app_ui, server)
View(app)
View(app)
View(model)
quit
install.packages("reticulate")
library(reticulate)
virtualenv_create(envname = "myenv")
virtualenv_install("myenv", packages = c("pandas", "numpy", "scikit-learn"))
library(reticulate)
use_virtualenv("myenv", required = TRUE)
py_install("palmerpenguins")
reticulate::repl_python()
from palmerpenguins import penguins
import vetiver
from vetiver import VetiverModel
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel
import pins
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model', allow_pickle_read=True)
vetiver.vetiver_pin_write(b,v)
v = vetiver.VetiverModel.from_pin(b, 'penguin_model')
app = vetiver.VetiverAPI(v, check_prototype=True)
# app.run(port=8080)
quit
reticulate::py_install("duckdb")
reticulate::repl_python()
quit
reticulate::repl_python()
quit
